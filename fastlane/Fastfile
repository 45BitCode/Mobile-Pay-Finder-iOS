# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.89.0"

default_platform :ios

platform :ios do
  before_all do
    ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
    
    if is_ci
    	puts "Is CI"
    else
    	puts "Not CI"
    end
    
    cocoapods
    #sh "cd .. && cp ./ProvisioningProfiles/* /Library/Developer/XcodeServer/ProvisioningProfiles/"
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end
  
  lane :app_ids do
  
  end
  
  lane :provision do

	project_name = "MobilePayFinder"
	
  	ENV['SIGH_APP_IDENTIFIER'] = 'fortyfivebitcode.applepayfinder'
  	ENV['SIGH_OUTPUT_PATH'] = './ProvisioningProfiles'
  	ENV['SIGH_USERNAME'] = "me@vincedavis.com"
  	ENV['SIGH_SKIP_CERTIFICATE_VERIFICATION'] = 'true' # https://github.com/KrauseFx/sigh/issues/141

  	ENV['FL_PROJECT_PROVISIONING_PROJECT_PATH'] = "#{project_name}.xcodeproj"
  	#ENV['FL_PROJECT_PROVISIONING_PROFILE_TARGET_FILTER'] = '^MobilePayFinder$' # exact match in regex, we don't want e.g. XCSTutorialProject1Tests

  	# create a folder for our provisioning profiles if not exists
  	sh "cd .. && mkdir -p ProvisioningProfiles"
  	
  	
  	app_indentifier = ENV['SIGH_APP_IDENTIFIER']

  	# generate development profile
  	profile_name = "#{project_name}_app_dev"
  	profile_file = "#{profile_name}.mobileprovision"
  	profile_path = "./ProvisioningProfiles/#{profile_file}"
  	udid_dev = sigh(
  		app_identifier: "#{app_indentifier}",
  		provisioning_name: profile_name,
  		filename: profile_file,
  		development: true
  		)

  	# set the development profile in the project
  	update_project_provisioning(
  		xcodeproj: "#{project_name}.xcodeproj",
  		profile: profile_path,
  		target_filter: ".*MobilePayFinder.*",
  		build_configuration: 'Debug'
  		)

  	# generate appstore profile
  	profile_name = "#{project_name}_app_appstore"
  	profile_file = "#{profile_name}.mobileprovision"
  	profile_path = "./ProvisioningProfiles/#{profile_file}"
  	udid_appstore = sigh(
  		app_identifier: "#{app_indentifier}",
  		provisioning_name: profile_name,
  		filename: profile_file
  		)

  	# set the appstore profile in the project
  	update_project_provisioning(
  		xcodeproj: "#{project_name}.xcodeproj",
  		profile: profile_path,
  		target_filter: ".*MobilePayFinder.*",
  		build_configuration: 'Release'
  		)
  		
  	# generate TV Dev profile
  	profile_name = "#{project_name}_tv_dev"
  	profile_file = "#{profile_name}.mobileprovision"
  	profile_path = "./ProvisioningProfiles/#{profile_file}"
  	udid_tv_dev = sigh(
  		app_identifier: "#{app_indentifier}.TV",
  		provisioning_name: profile_name,
  		filename: profile_file,
  		development: true
  		)

  	# set the TV Dev profile in the project
  	update_project_provisioning(
  		xcodeproj: "#{project_name}.xcodeproj",
  		profile: profile_path,
  		target_filter: ".*TV.*",
  		build_configuration: 'Debug'
  		)
  		
  	# generate TV appstore profile
  	profile_name = "#{project_name}_tv_appstore"
  	profile_file = "#{profile_name}.mobileprovision"
  	profile_path = "./ProvisioningProfiles/#{profile_file}"
  	udid_tv_appstore = sigh(
  		app_identifier: "#{app_indentifier}.TV",
  		provisioning_name: profile_name,
  		filename: profile_file
  		)

  	# set the TV appstore profile in the project
  	update_project_provisioning(
  		xcodeproj: "#{project_name}.xcodeproj",
  		profile: profile_path,
  		target_filter: ".*TV.*",
  		build_configuration: 'Release'
  		)
  		
  	# generate Watch App Dev profile
  	profile_name = "#{project_name}_watch_app_dev"
  	profile_file = "#{profile_name}.mobileprovision"
  	profile_path = "./ProvisioningProfiles/#{profile_file}"
  	udid_watch_app_dev = sigh(
  		app_identifier: "#{app_indentifier}.watchkitapp",
  		provisioning_name: profile_name,
  		filename: profile_file,
  		development: true
  		)

  	# set the Watch App Dev profile in the project
  	update_project_provisioning(
  		xcodeproj: "#{project_name}.xcodeproj",
  		profile: profile_path,
  		target_filter: "^Watch$",
  		build_configuration: 'Debug'
  		)
  		
  	# generate Watch App Appstore profile
  	profile_name = "#{project_name}_watch_app_appstore"
  	profile_file = "#{profile_name}.mobileprovision"
  	profile_path = "./ProvisioningProfiles/#{profile_file}"
  	udid_watch_app_appstore = sigh(
  		app_identifier: "#{app_indentifier}.watchkitapp",
  		provisioning_name: profile_name,
  		filename: profile_file
  		)

  	# set the Watch App Dev profile in the project
  	update_project_provisioning(
  		xcodeproj: "#{project_name}.xcodeproj",
  		profile: profile_path,
  		target_filter: "^Watch$",
  		build_configuration: 'Release'
  		)

  	# generate Watch Ext Dev profile
  	profile_name = "#{project_name}_watch_ext_dev"
  	profile_file = "#{profile_name}.mobileprovision"
  	profile_path = "./ProvisioningProfiles/#{profile_file}"
  	udid_watch_ext_dev = sigh(
  		app_identifier: "#{app_indentifier}.watchkitapp.watchkitextension",
  		provisioning_name: profile_name,
  		filename: profile_file,
  		development: true
  		)

  	# set the Watch Ext Dev profile in the project
  	update_project_provisioning(
  		xcodeproj: "#{project_name}.xcodeproj",
  		profile: profile_path,
  		target_filter: "^Watch Extension$",
  		build_configuration: 'Debug'
  		)
  		
  	# generate Watch Ext Appstore profile
  	profile_name = "#{project_name}_watch_ext_appstore"
  	profile_file = "#{profile_name}.mobileprovision"
  	profile_path = "./ProvisioningProfiles/#{profile_file}"
  	udid_watch_ext_appstore = sigh(
  		app_identifier: "#{app_indentifier}.watchkitapp.watchkitextension",
  		provisioning_name: profile_name,
  		filename: profile_file
  		)

  	# set the Watch Ext Appstore profile in the project
  	update_project_provisioning(
  		xcodeproj: "#{project_name}.xcodeproj",
  		profile: profile_path,
  		target_filter: "^Watch Extension$",
  		build_configuration: 'Release'
  		)
  		
  	# generate Today Ext Dev profile
  	profile_name = "#{project_name}_today_ext_dev"
  	profile_file = "#{profile_name}.mobileprovision"
  	profile_path = "./ProvisioningProfiles/#{profile_file}"
  	udid_today_ext_dev = sigh(
  		app_identifier: "#{app_indentifier}.Today",
  		provisioning_name: profile_name,
  		filename: profile_file,
  		development: true
  		)

  	# set the Today Ext Dev profile in the project
  	update_project_provisioning(
  		xcodeproj: "#{project_name}.xcodeproj",
  		profile: profile_path,
  		target_filter: "^Today$",
  		build_configuration: 'Debug'
  		)
  		
  	# generate Today Ext Appstore profile
  	profile_name = "#{project_name}_today_ext_appstore"
  	profile_file = "#{profile_name}.mobileprovision"
  	profile_path = "./ProvisioningProfiles/#{profile_file}"
  	udid_today_ext_appstore = sigh(
  		app_identifier: "#{app_indentifier}.Today",
  		provisioning_name: profile_name,
  		filename: profile_file
  		)

  	# set the Today Ext Appstore profile in the project
  	update_project_provisioning(
  		xcodeproj: "#{project_name}.xcodeproj",
  		profile: profile_path,
  		target_filter: "^Today$",
  		build_configuration: 'Release'
  		)
  		
  	# generate Action Ext Dev profile
  	profile_name = "#{project_name}_action_ext_dev"
  	profile_file = "#{profile_name}.mobileprovision"
  	profile_path = "./ProvisioningProfiles/#{profile_file}"
  	udid_action_ext_dev = sigh(
  		app_identifier: "#{app_indentifier}.Action",
  		provisioning_name: profile_name,
  		filename: profile_file,
  		development: true
  		)

  	# set the Action Ext Dev profile in the project
  	update_project_provisioning(
  		xcodeproj: "#{project_name}.xcodeproj",
  		profile: profile_path,
  		target_filter: "^Action$",
  		build_configuration: 'Debug'
  		)
  		
  	# generate Action Ext Appstore profile
  	profile_name = "#{project_name}_action_ext_appstore"
  	profile_file = "#{profile_name}.mobileprovision"
  	profile_path = "./ProvisioningProfiles/#{profile_file}"
  	udid_action_ext_appstore = sigh(
  		app_identifier: "#{app_indentifier}.Action",
  		provisioning_name: profile_name,
  		filename: profile_file
  		)

  	# set the Action Ext Appstore profile in the project
  	update_project_provisioning(
  		xcodeproj: "#{project_name}.xcodeproj",
  		profile: profile_path,
  		target_filter: "^Action$",
  		build_configuration: 'Release'
  		)
  end

  #desc "Submit a new Beta Build to Apple TestFlight"
  #desc "This will also make sure the profile is up to date"
  lane :beta do
    # match(type: "appstore") # more information: https://codesigning.guide
    #gym(scheme: "MobilePayFinder") # Build your app - more options available
    #pilot
	#cocoapods
	#cert
	#sigh(force: true)
	#fastlancert(development: true, output_path: "provisioning")
    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
    #sh "cd .. && cp ./assets/* ./MobilePayFinder/Assets.xcassets/AppIcon.appiconset/"
    #build_number = number_of_commits
    #version = "#{get_version_number}.#{build_number}"
    #badge(shield: "Build-#{version}-blue", alpha: false)
  end

  desc "Deploy a new version to the App Store"
  lane :appstore do
    # match(type: "appstore")
    # snapshot
    gym(scheme: "MobilePayFinder") # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    slack(
       message: "Successful Lane Build"
    )
  end

  error do |lane, exception|
    slack(
       message: exception.message,
       success: false
    )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
